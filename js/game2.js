// Colors and button elements for the game
const colors = ["red", "blue", "green", "yellow"];
const colorButtons = document.querySelectorAll(".color-btn");
const startButton = document.getElementById("start-button");
const message = document.getElementById("message");
const levelText = document.getElementById("level");

let gameSequence = [];    // Sequence generated by the game
let playerSequence = [];  // Sequence entered by the player
let level = 0;            // Current game level
let acceptingInput = false; // State for accepting player input

// Modal and game over elements
const gameOverModal = document.getElementById("game-over-modal");
const finalLevel = document.getElementById("final-level");
const closeModalButton = document.getElementById("close-modal");

// Function to flash a button and play corresponding sound
function flashColor(color) {
  const button = document.getElementById(color);
  const frequencies = {
    red: 440,    // A4
    blue: 554.37, // C#5
    green: 659.25, // E5
    yellow: 783.99 // G5
  };

  playBeep(frequencies[color]); // Play beep sound
  button.classList.add("active");
  setTimeout(() => button.classList.remove("active"), 500);
}

// Plays the game sequence for the player to watch
function playSequence() {
  let index = 0;
  acceptingInput = false;
  message.textContent = "Watch the sequence...";

  const interval = setInterval(() => {
    flashColor(gameSequence[index]);
    index++;

    if (index >= gameSequence.length) {
      clearInterval(interval);
      acceptingInput = true;
      message.textContent = "Now it's your turn!";
    }
  }, 800);
}

// Adds a new random color to the game sequence
function addNewColor() {
  const randomColor = colors[Math.floor(Math.random() * colors.length)];
  gameSequence.push(randomColor);
}

// Starts a new round by adding a color and playing the sequence
function startNewRound() {
  level++;
  levelText.textContent = level;
  playerSequence = [];
  addNewColor();
  playSequence();
}

// Handles player input and checks it against the game sequence
function handlePlayerInput(color) {
  if (!acceptingInput) return;

  playerSequence.push(color);
  flashColor(color);

  const currentIndex = playerSequence.length - 1;

  // Check if the player's input matches the game sequence
  if (playerSequence[currentIndex] !== gameSequence[currentIndex]) {
    message.textContent = "Game Over! Try Again.";
    finalLevel.textContent = level;
    showGameOverModal();
    updateHighScore();
    resetGame();
    return;
  }

  // If player completes the sequence correctly, start a new round
  if (playerSequence.length === gameSequence.length) {
    message.textContent = "Correct! Get ready for the next round.";
    setTimeout(startNewRound, 1000);
  }
}

// Updates the high score for the current user
function updateHighScore() {
  const currentUser = JSON.parse(localStorage.getItem('current user'));
  const users = JSON.parse(localStorage.getItem("users")) || [];

  if (!currentUser["games"]) {
    currentUser["games"] = {};
  }

  let highestScore = currentUser["games"]["colorPuzzle"] || 0;

  if (level > highestScore) {
    currentUser["games"]["colorPuzzle"] = level;
    localStorage.setItem("current user", JSON.stringify(currentUser));

    const userIndex = users.findIndex(user => user.email === currentUser.email);
    if (userIndex > -1) {
      users[userIndex] = currentUser;
    } else {
      users.push(currentUser);
    }

    localStorage.setItem("users", JSON.stringify(users));
  }

  updateTopScores(level); // Update global top 3 scores
}

// Updates the global top scores for the game
function updateTopScores(level) {
  const currentUser = JSON.parse(localStorage.getItem('current user'));
  const colorPuzzleScores = JSON.parse(localStorage.getItem("colorPuzzle")) || [];

  const newScoreEntry = {
    name: currentUser.name,
    score: level,
    timestamp: new Date().toISOString()
  };

  colorPuzzleScores.push(newScoreEntry);
  colorPuzzleScores.sort((a, b) => b.score - a.score);

  const topThreeScores = colorPuzzleScores.slice(0, 3); // Keep top 3 scores
  localStorage.setItem("colorPuzzleTop", JSON.stringify(topThreeScores));
  localStorage.setItem("colorPuzzleAll", JSON.stringify(colorPuzzleScores)); // Save all scores
}

// Resets the game state to initial values
function resetGame() {
  gameSequence = [];
  playerSequence = [];
  level = 0;
  acceptingInput = false;
  startButton.disabled = false;
  startButton.style.backgroundColor = "#00bcd4";
}

// Displays the game over modal
function showGameOverModal() {
  gameOverModal.style.display = "flex";
  startButton.disabled = true;
  startButton.style.backgroundColor = "#b0bec5";
}

// Closes the game over modal
closeModalButton.addEventListener("click", () => {
  gameOverModal.style.display = "none";
});

// Attaches event listeners to color buttons for player input
colorButtons.forEach(button => {
  button.addEventListener("click", () => handlePlayerInput(button.id));
});

// Starts the game when the start button is clicked
startButton.addEventListener("click", () => {
  resetGame();
  startButton.disabled = true;
  startButton.style.backgroundColor = "#b0bec5";
  startNewRound();
});

// Plays a beep sound for the given frequency
function playBeep(frequency) {
  const audioContext = new (window.AudioContext || window.webkitAudioContext)();
  const oscillator = audioContext.createOscillator();
  const gainNode = audioContext.createGain();

  oscillator.type = "sine";
  oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
  oscillator.connect(gainNode);
  gainNode.connect(audioContext.destination);

  oscillator.start();
  gainNode.gain.exponentialRampToValueAtTime(0.0001, audioContext.currentTime + 0.5);
  oscillator.stop(audioContext.currentTime + 0.5);
}
